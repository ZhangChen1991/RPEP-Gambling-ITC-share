ggplot(aes(part, immediate_prop,
group = guess_outcome, color = guess_outcome)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = immediate_prop-ci, ymax = immediate_prop+ci),
position = position_dodge(width = 0.5),
width = 0.25) +
labs(x = "Part", y = "Proportion of choosing the immediate option (%)",
color = "Guess outcome") +
facet_wrap(~delay_time, ncol = 1)
# calculate the proportion of choosing the immediate option in each cell
ITC_choice_over_time <- d_main %>%
group_by(subjectID, guess_outcome, delay_time, block_number) %>%
summarize(
ntrial = n(),
immediate_prop = mean(ITC_choice == "immediate") * 100
)
# plot the proportion of immediate choices in each cell
ITC_choice_over_time_summary <- ITC_choice_over_time %>%
summarySEwithin(
measurevar = "immediate_prop",
idvar = "subjectID",
withinvars = c("guess_outcome", "delay_time", "block_number"))
ITC_choice_over_time_summary %>%
ggplot(aes(block_number, immediate_prop,
group = guess_outcome, color = guess_outcome)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = immediate_prop-ci, ymax = immediate_prop+ci),
position = position_dodge(width = 0.5),
width = 0.25) +
labs(x = "Part", y = "Proportion of choosing the immediate option (%)",
color = "Guess outcome") +
facet_wrap(~delay_time, ncol = 1)
# run a repeated-measures ANOVA on the proportion of immediate choices
ITC_choice_over_time_anova <- aov_ez(
id = "subjectID",
dv = "immediate_prop",
within = c("guess_outcome", "delay_time", "block_number"),
data = ITC_choice)
ITC_choice_over_time_anova <- nice(ITC_choice_over_time_anova)
# show as tables
ITC_choice_over_time_anova %>%
kbl(caption = "Repeated-measures ANOVA on the proportion of immediate choices") %>%
kable_styling()
ITC_choice_over_time_anova <- aov_ez(
id = "subjectID",
dv = "immediate_prop",
within = c("guess_outcome", "delay_time", "block_number"),
data = ITC_choice_over_time)
ITC_choice_over_time_anova <- nice(ITC_choice_over_time_anova)
ITC_choice_over_time_anova
# run a repeated-measures ANOVA on the proportion of immediate choices
ITC_choice_over_time_anova <- aov_ez(
id = "subjectID",
dv = "immediate_prop",
within = c("guess_outcome", "delay_time", "block_number"),
data = ITC_choice_over_time)
ITC_choice_over_time_anova <- nice(ITC_choice_over_time_anova)
# show as tables
ITC_choice_over_time_anova %>%
kbl(caption = "Repeated-measures ANOVA on the proportion of immediate choices") %>%
kable_styling()
# compute the number of trials, mean and median startRT in each cell
ITC_startRT <- d_main %>%
group_by(subjectID, block_number, guess_outcome) %>%
summarize(
ntrial = n(),
rt_mean = mean(RT_ITC_start),
rt_median = median(RT_ITC_start)
)
# plot the mean number of trials across blocks
trial_number_summary <- ITC_startRT %>%
summarySEwithin(measurevar = "ntrial",
withinvars = c("block_number", "guess_outcome"),
idvar = "subjectID")
trial_number_plot <- trial_number_summary %>%
ggplot(aes(block_number, ntrial, group = guess_outcome, color = guess_outcome)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = ntrial-ci, ymax = ntrial+ci),
position = position_dodge(width = 0.5),
width = 0.25) +
labs(x = "Block number", y = "Mean number of trials",
color = "Guess outcome")
# plot the mean start RTs across blocks
ITC_startRT_mean_summary <- ITC_startRT %>%
summarySEwithin(measurevar = "rt_mean",
withinvars = c("block_number", "guess_outcome"),
idvar = "subjectID")
startRT_mean_plot <- ITC_startRT_mean_summary %>%
ggplot(aes(block_number, rt_mean, group = guess_outcome, color = guess_outcome)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = rt_mean-ci, ymax = rt_mean+ci),
position = position_dodge(width = 0.5),
width = 0.25) +
labs(x = "Block number", y = "Mean start RT (milliseconds)",
color = "Guess outcome")
# plot the median start RTs across blocks
ITC_startRT_median_summary <- ITC_startRT %>%
summarySEwithin(measurevar = "rt_median",
withinvars = c("block_number", "guess_outcome"),
idvar = "subjectID")
startRT_median_plot <- ITC_startRT_median_summary %>%
ggplot(aes(block_number, rt_median, group = guess_outcome, color = guess_outcome)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = rt_median-ci, ymax = rt_median+ci),
position = position_dodge(width = 0.5),
width = 0.25) +
labs(x = "Block number", y = "Median start RT (milliseconds)",
color = "Guess outcome")
# put the plots together
startRT_plot <- trial_number_plot/startRT_mean_plot / startRT_median_plot +
plot_layout(guides = "collect")
startRT_plot
load("functions/pairwise_comparisons.R")
load("functions/pairwise_comparisons.R")
source("functions/pairwise_comparisons.R")
ITC_startRT
ITC_startRT_per_subject <- ITC_startRT %>%
group_by(subjectID, guess_outcome) %>%
summarize(
rt_mean = mean(rt_mean),
rt_median = mean(rt_median)
)
View(ITC_startRT_per_subject)
startRT_mean_wide <- ITC_startRT_per_subject %>%
pivot_wider(
id_cols = subjectID,
names_from = guess_outcome,
values_from = rt_mean
)
View(startRT_mean_wide)
# pairwise comparisons on mean startRT
mean_win_loss <- TES(startRT_mean_wide$win, startRT_mean_wide$loss, paired = T)
mean_win_loss
mean_win_neutral <- TES(startRT_mean_wide$win, startRT_mean_wide$neutral, paired = T)
mean_win_neutral
mean_loss_neutral <- TES(startRT_mean_wide$loss, startRT_mean_wide$neutral, paired = T)
mean_loss_neutral
# turn into wide format for median startRT
startRT_median_wide <- ITC_startRT_per_subject %>%
pivot_wider(
id_cols = subjectID,
names_from = guess_outcome,
values_from = rt_median
)
median_win_loss <- TES(startRT_median_wide$win, startRT_median_wide$loss, paired = T)
median_win_neutral <- TES(startRT_median_wide$win, startRT_median_wide$neutral, paired = T)
median_loss_neutral <- TES(startRT_median_wide$loss, startRT_median_wide$neutral, paired = T)
median_win_loss
median_win_neutral
median_loss_neutral
startRT_pairwise <- bind_rows(
mean_win_loss, mean_win_neutral, mean_loss_neutral,
median_win_loss, median_win_neutral, median_loss_neutral
)
View(startRT_pairwise)
rep(c("mean RT", "median RT"), each = 3)
rep(c("Win vs. Loss", "Win vs. Neutral", "Loss vs. Neutral", 2))
rep(c("Win vs. Loss", "Win vs. Neutral", "Loss vs. Neutral"), 2)
View(startRT_pairwise)
startRT_pairwise %>%
mutate(
Variable = rep(c("mean RT", "median RT"), each = 3),
Comparison = rep(c("Win vs. Loss", "Win vs. Neutral", "Loss vs. Neutral"), 2),
across(c(mean_x, upperCI), ~round(.x, digits = 1))
)
startRT_pairwise %>%
mutate(
Variable = rep(c("mean RT", "median RT"), each = 3),
Comparison = rep(c("Win vs. Loss", "Win vs. Neutral", "Loss vs. Neutral"), 2),
across(c(x_mean:upperCI), ~round(.x, digits = 1))
)
startRT_pairwise %>%
mutate(
Variable = rep(c("mean RT", "median RT"), each = 3),
Comparison = rep(c("Win vs. Loss", "Win vs. Neutral", "Loss vs. Neutral"), 2),
across(c(x_mean:upperCI), ~round(.x, digits = 1))
) %>%
select(Variable, Comparison, x_mean:BayesF, gav)
# collapse all blocks
ITC_startRT_per_subject <- ITC_startRT %>%
group_by(subjectID, guess_outcome) %>%
summarize(
rt_mean = mean(rt_mean),
rt_median = mean(rt_median)
)
# turn into wide format for mean startRT
startRT_mean_wide <- ITC_startRT_per_subject %>%
pivot_wider(
id_cols = subjectID,
names_from = guess_outcome,
values_from = rt_mean
)
# pairwise comparisons on mean startRT
mean_win_loss <- TES(startRT_mean_wide$win, startRT_mean_wide$loss, paired = T)
mean_win_neutral <- TES(startRT_mean_wide$win, startRT_mean_wide$neutral, paired = T)
mean_loss_neutral <- TES(startRT_mean_wide$loss, startRT_mean_wide$neutral, paired = T)
# turn into wide format for median startRT
startRT_median_wide <- ITC_startRT_per_subject %>%
pivot_wider(
id_cols = subjectID,
names_from = guess_outcome,
values_from = rt_median
)
# pairwise comparisons on median startRT
median_win_loss <- TES(startRT_median_wide$win, startRT_median_wide$loss, paired = T)
median_win_neutral <- TES(startRT_median_wide$win, startRT_median_wide$neutral, paired = T)
median_loss_neutral <- TES(startRT_median_wide$loss, startRT_median_wide$neutral, paired = T)
# put all comparisons together
startRT_pairwise <- bind_rows(
mean_win_loss, mean_win_neutral, mean_loss_neutral,
median_win_loss, median_win_neutral, median_loss_neutral
)
# do some formatting and show as table
startRT_pairwise %>%
mutate(
Variable = rep(c("mean RT", "median RT"), each = 3),
Comparison = rep(c("Win vs. Loss", "Win vs. Neutral", "Loss vs. Neutral"), 2),
across(c(x_mean:upperCI), ~round(.x, digits = 1))
) %>%
select(Variable, Comparison, x_mean:BayesF, gav) %>%
kbl(caption = "Pairwise comparisons on startRTs") %>%
kable_styling()
ITC_choice
ITC_choice_wide <- ITC_choice %>%
pivot_wider(
id_cols = subjectID,
names_from = c(guess_outcome, delay_time),
values_from = immediate_prop
)
View(ITC_choice_wide)
# pairwise comparisons for the 5-s delay condition
win_loss_delay5 <- TES(ITC_choice_wide$win_5, ITC_choice_wide$loss_5, paired = T)
win_loss_delay5
# pairwise comparisons for the 5-s delay condition
win_loss_delay5 <- TES(ITC_choice_wide$win_5, ITC_choice_wide$loss_5, paired = T)
win_neutral_delay5 <- TES(ITC_choice_wide$win_5, ITC_choice_wide$neutral_5, paired = T)
loss_neutral_delay5 <- TES(ITC_choice_wide$loss_5, ITC_choice_wide$neutral_5, paired = T)
# pairwise comparisons for the 10-s delay condition
win_loss_delay10 <- TES(ITC_choice_wide$win_10, ITC_choice_wide$loss_10, paired = T)
win_neutral_delay10 <- TES(ITC_choice_wide$win_10, ITC_choice_wide$neutral_10, paired = T)
loss_neutral_delay10 <- TES(ITC_choice_wide$loss_10, ITC_choice_wide$neutral_10, paired = T)
ITC_choice_pairwise <- bind_rows(
win_loss_delay5, win_neutral_delay5, loss_neutral_delay5,
win_loss_delay10, win_neutral_delay10, loss_neutral_delay10
)
ITC_choice_wide <- ITC_choice %>%
pivot_wider(
id_cols = subjectID,
names_from = c(guess_outcome, delay_time),
values_from = immediate_prop
)
# pairwise comparisons for the 5-s delay condition
win_loss_delay5 <- TES(ITC_choice_wide$win_5, ITC_choice_wide$loss_5, paired = T)
win_neutral_delay5 <- TES(ITC_choice_wide$win_5, ITC_choice_wide$neutral_5, paired = T)
loss_neutral_delay5 <- TES(ITC_choice_wide$loss_5, ITC_choice_wide$neutral_5, paired = T)
# pairwise comparisons for the 10-s delay condition
win_loss_delay10 <- TES(ITC_choice_wide$win_10, ITC_choice_wide$loss_10, paired = T)
win_neutral_delay10 <- TES(ITC_choice_wide$win_10, ITC_choice_wide$neutral_10, paired = T)
loss_neutral_delay10 <- TES(ITC_choice_wide$loss_10, ITC_choice_wide$neutral_10, paired = T)
# put all comparisons together
ITC_choice_pairwise <- bind_rows(
win_loss_delay5, win_neutral_delay5, loss_neutral_delay5,
win_loss_delay10, win_neutral_delay10, loss_neutral_delay10
)
# do some formatting and show as table
ITC_choice_pairwise %>%
mutate(
Delay = rep(c("5 s", "10 s"), each = 3),
Comparison = rep(c("Win vs. Loss", "Win vs. Neutral", "Loss vs. Neutral"), 2),
across(c(x_mean:upperCI), ~round(.x, digits = 1))
) %>%
select(Variable, Comparison, x_mean:BayesF, gav) %>%
kbl(caption = "Pairwise comparisons on the proportion of immediate choices") %>%
kable_styling()
ITC_choice_wide <- ITC_choice %>%
pivot_wider(
id_cols = subjectID,
names_from = c(guess_outcome, delay_time),
values_from = immediate_prop
)
# pairwise comparisons for the 5-s delay condition
win_loss_delay5 <- TES(ITC_choice_wide$win_5, ITC_choice_wide$loss_5, paired = T)
win_neutral_delay5 <- TES(ITC_choice_wide$win_5, ITC_choice_wide$neutral_5, paired = T)
loss_neutral_delay5 <- TES(ITC_choice_wide$loss_5, ITC_choice_wide$neutral_5, paired = T)
# pairwise comparisons for the 10-s delay condition
win_loss_delay10 <- TES(ITC_choice_wide$win_10, ITC_choice_wide$loss_10, paired = T)
win_neutral_delay10 <- TES(ITC_choice_wide$win_10, ITC_choice_wide$neutral_10, paired = T)
loss_neutral_delay10 <- TES(ITC_choice_wide$loss_10, ITC_choice_wide$neutral_10, paired = T)
# put all comparisons together
ITC_choice_pairwise <- bind_rows(
win_loss_delay5, win_neutral_delay5, loss_neutral_delay5,
win_loss_delay10, win_neutral_delay10, loss_neutral_delay10
)
# do some formatting and show as table
ITC_choice_pairwise %>%
mutate(
Delay = rep(c("5 s", "10 s"), each = 3),
Comparison = rep(c("Win vs. Loss", "Win vs. Neutral", "Loss vs. Neutral"), 2),
across(c(x_mean:upperCI), ~round(.x, digits = 1))
) %>%
select(Delay, Comparison, x_mean:BayesF, gav) %>%
kbl(caption = "Pairwise comparisons on the proportion of immediate choices") %>%
kable_styling()
View(d_main)
ITC_choice_amount <- d_main %>%
mutate(amount_level = ceiling(immediate_amount/4)) %>%
group_by(subjectID, guess_outcome, delay_time, amount_level) %>%
summarize(immediate_prop = mean(ITC_choice == "immediate") * 100)
View(ITC_choice_amount)
ITC_choice_amount_summary <- ITC_choice_amount %>%
summarySEwithin(
measurevar = "immediate_prop",
withinvars = c("guess_outcome", "delay_time", "amount_level"),
idvar = "subjectID"
)
View(ITC_choice_amount_summary)
ITC_choice_amount_summary %>%
ggplot(aes(amount_level, immediate_prop,
group = guess_outcome, color = guess_outcome)) +
geom_point(position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = immediate_prop-ci, ymax=immediate_prop+ci),
position = position_dodge(width = 0.4), width = 0.25) +
facet_wrap(~delay_time, ncol = 2)
ITC_choice_amount <- d_main %>%
mutate(amount_level = ceiling(immediate_amount/4)) %>%
group_by(subjectID, guess_outcome, delay_time, amount_level) %>%
summarize(immediate_prop = mean(ITC_choice == "immediate") * 100)
ITC_choice_amount_summary <- ITC_choice_amount %>%
summarySEwithin(
measurevar = "immediate_prop",
withinvars = c("guess_outcome", "delay_time", "amount_level"),
idvar = "subjectID"
) %>%
mutate(
amount_level = factor(amount_level,
levels = c(1, 2, 3, 4),
labels = c("1-4", "5-8", "9-12", "13-16"))
)
ITC_choice_amount_summary %>%
ggplot(aes(amount_level, immediate_prop,
group = guess_outcome, color = guess_outcome)) +
geom_point(position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = immediate_prop-ci, ymax=immediate_prop+ci),
position = position_dodge(width = 0.4), width = 0.25) +
labs(x = "Immediate amount", y = "Proportion of immediate choices (%)",
color = "Prior outcome") +
facet_wrap(~delay_time, ncol = 2)
View(d_main)
collectRT <- d_main %>%
mutate(
received_amount = ifelse(ITC_choice == "immediate",
immediate_amount, 20),
amount_level = ceiling(received_amount/4)
) %>%
group_by(subjectID, delay_time, amount_level) %>%
summarize(collectRT = mean(RT_ITC_collect))
View(collectRT)
collectRT <- d_main %>%
mutate(
received_amount = ifelse(ITC_choice == "immediate",
immediate_amount, 20),
amount_level = ceiling(received_amount/4)
) %>%
group_by(subjectID, delay_time, amount_level) %>%
summarize(collectRT = median(RT_ITC_collect))
d_collectRT <- d_main %>%
mutate(
received_amount = ifelse(ITC_choice == "immediate",
immediate_amount, 20),
amount_level = ceiling(received_amount/4)
) %>%
group_by(subjectID, delay_time, amount_level) %>%
summarize(collectRT = median(RT_ITC_collect))
d_collectRT <- d_main %>%
mutate(
received_amount = ifelse(ITC_choice == "immediate",
immediate_amount, 20),
amount_level = ceiling(received_amount/4)
) %>%
group_by(subjectID, delay_time, amount_level) %>%
summarize(collectRT = median(RT_ITC_collect))
d_collectRT_summary <- d_collectRT %>%
summarySEwithin(
measurevar = "collectRT",
withinvars = c("delay_time", "amount_level"),
idvar = "subjectID"
) %>%
mutate(
amount_level = factor(amount_level,
levels = c(1, 2, 3, 4, 5),
labels = c("1-4", "5-8", "9-12", "13-16", "20"))
)
d_collectRT <- d_main %>%
mutate(
received_amount = ifelse(ITC_choice == "immediate",
immediate_amount, 20),
amount_level = ceiling(received_amount/4)
) %>%
group_by(subjectID, delay_time, amount_level) %>%
summarize(collectRT = median(RT_ITC_collect))
d_collectRT_summary <- d_collectRT %>%
summarySEwithin(
measurevar = "collectRT",
withinvars = c("delay_time", "amount_level"),
idvar = "subjectID"
) %>%
mutate(
amount_level = factor(amount_level,
levels = c(1, 2, 3, 4, 5),
labels = c("1-4", "5-8", "9-12", "13-16", "20"))
)
d_collectRT_summary %>%
ggplot(aes(amount_level, collectRT,
group = delay_time, color = delay_time)) +
geom_point(position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = collectRT-ci, ymax=collectRT+ci),
position = position_dodge(width = 0.4), width = 0.25) +
labs(x = "Received amount", y = "RT of collecting reward (milliseconds)",
color = "Delay duration")
d_startRT_guessing <- d_main %>%
mutate(
received_amount = ifelse(ITC_choice == "immediate",
immediate_amount, 20),
amount_level = ceiling(received_amount/4)
) %>%
group_by(subjectID, block_number) %>%
mutate(
prev_trial_number = lag(trial_number),
trial_diff = trial_number - prev_trial_number,
prev_amount_level = ifelse(trial_diff == 1,
lag(amount_level), NA),
prev_delay_time = ifelse(trial_diff == 1,
lag(delay_time), NA)
) %>%
filter(!is.na(prev_amount_level)) %>%
group_by(subjectID, prev_delay_time, prev_amount_level) %>%
summarize(startRT = median(RT_guess_start))
d_startRT_guessing <- d_main %>%
mutate(
received_amount = ifelse(ITC_choice == "immediate",
immediate_amount, 20),
amount_level = ceiling(received_amount/4)
) %>%
group_by(subjectID, block_number) %>%
mutate(
prev_trial_number = lag(trial_number),
trial_diff = trial_number - prev_trial_number,
prev_amount_level = ifelse(trial_diff == 1,
lag(amount_level), NA),
prev_delay_time = ifelse(trial_diff == 1,
lag(delay_time), NA)
) %>%
filter(!is.na(prev_amount_level)) %>%
group_by(subjectID, prev_delay_time, prev_amount_level) %>%
summarize(startRT = median(RT_guess_start))
d_startRT_guessing_summary <- d_startRT_guessing %>%
summarySEwithin(
measurevar = "startRT",
withinvars = c("prev_delay_time", "prev_amount_level"),
idvar = "subjectID"
) %>%
mutate(
prev_amount_level = factor(prev_amount_level,
levels = c(1, 2, 3, 4, 5),
labels = c("1-4", "5-8", "9-12", "13-16", "20"))
)
d_startRT_guessing_summary %>%
ggplot(aes(prev_amount_level, startRT,
group = prev_delay_time, color = delay_time)) +
geom_point(position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = startRT-ci, ymax=startRT+ci),
position = position_dodge(width = 0.4), width = 0.25) +
labs(x = "Received amount in the previous trial", y = "Median RT of starting the guessing game (milliseconds)",
color = "Delay duration in the previous trial")
d_startRT_guessing <- d_main %>%
mutate(
received_amount = ifelse(ITC_choice == "immediate",
immediate_amount, 20),
amount_level = ceiling(received_amount/4)
) %>%
group_by(subjectID, block_number) %>%
mutate(
prev_trial_number = lag(trial_number),
trial_diff = trial_number - prev_trial_number,
prev_amount_level = ifelse(trial_diff == 1,
lag(amount_level), NA),
prev_delay_time = ifelse(trial_diff == 1,
lag(delay_time), NA)
) %>%
filter(!is.na(prev_amount_level)) %>%
group_by(subjectID, prev_delay_time, prev_amount_level) %>%
summarize(startRT = median(RT_guess_start))
d_startRT_guessing_summary <- d_startRT_guessing %>%
summarySEwithin(
measurevar = "startRT",
withinvars = c("prev_delay_time", "prev_amount_level"),
idvar = "subjectID"
) %>%
mutate(
prev_amount_level = factor(prev_amount_level,
levels = c(1, 2, 3, 4, 5),
labels = c("1-4", "5-8", "9-12", "13-16", "20"))
)
d_startRT_guessing_summary %>%
ggplot(aes(prev_amount_level, startRT,
group = prev_delay_time, color = prev_delay_time)) +
geom_point(position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = startRT-ci, ymax=startRT+ci),
position = position_dodge(width = 0.4), width = 0.25) +
labs(x = "Received amount in the previous trial",
y = "Median RT of starting the guessing game (milliseconds)",
color = "Delay duration in the previous trial")
